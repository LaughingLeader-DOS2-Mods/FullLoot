Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLFULOOT_Trader_InitSettings();

KBSECTION
//REGION SETTINGS
PROC
LLFULOOT_Trader_InitSettings()
THEN
//Undead tags need to be checked first
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_DWARF", 0,"Dwarves_Hero_Female_Undead_373a1966-a54d-4a3e-be70-e779a654c914");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_DWARF", 1,"Dwarves_Hero_Male_Undead_726442a5-6856-4b0d-91ed-5d2f003b8a0c");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_ELF", 0,"Elves_Hero_Female_Undead_7f366172-9fd1-45df-8719-a6d14cb534b3");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_ELF", 1,"Elves_Hero_Male_Undead_9eeaaafd-c47d-4650-9200-b00430d61e83");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_HUMAN", 0,"Humans_Hero_Female_Undead_3bd0693d-0b0a-4f6d-93e2-aea9be654bee");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_HUMAN", 1,"Humans_Hero_Male_Undead_5ab5d036-4606-4265-962e-c2e4d2d2408b");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_LIZARD", 0,"Lizards_Hero_Female_Undead_725f9a47-a3d4-41d2-92cf-017d18c2b212");
DB_LLFULOOT_Trader_RaceTemplates("UNDEAD_LIZARD", 1,"Lizards_Hero_Male_Undead_57b70554-36bf-4b86-b9aa-8f7cc3944153");
DB_LLFULOOT_Trader_RaceTemplates("DWARF", 0,"Dwarves_Hero_Female_c1c58707-b06e-499e-9c43-91a90be602b0");
DB_LLFULOOT_Trader_RaceTemplates("DWARF", 1,"Dwarves_Hero_Male_024d1763-b2aa-46ec-b705-6338059838be");
DB_LLFULOOT_Trader_RaceTemplates("ELF", 0,"Elves_Hero_Female_7ef846f5-34dc-450c-815e-a58dfc190a7b");
DB_LLFULOOT_Trader_RaceTemplates("ELF", 1,"Elves_Hero_Male_19913083-924e-45ec-8b5b-119d5913722f");
DB_LLFULOOT_Trader_RaceTemplates("HUMAN", 0,"Humans_Hero_Female_de8ea39b-6989-4b93-b34a-81e549c540f2");
DB_LLFULOOT_Trader_RaceTemplates("HUMAN", 1,"Humans_Hero_Male_25611432-e5e4-482a-8f5d-196c9e90001e");
DB_LLFULOOT_Trader_RaceTemplates("LIZARD", 0,"Lizards_Hero_Female_e4a6bcfa-ecd6-4e56-8592-cd16b85a1c50");
DB_LLFULOOT_Trader_RaceTemplates("LIZARD", 1,"Lizards_Hero_Male_fa12e21f-0a10-47dd-af46-ab2c9a53cf6d");

DB_LLFULOOT_Trader_GuardPresets(0, "Battlemage");
DB_LLFULOOT_Trader_GuardPresets(1, "Cleric");
DB_LLFULOOT_Trader_GuardPresets(2, "Conjurer");
DB_LLFULOOT_Trader_GuardPresets(3, "Enchanter");
DB_LLFULOOT_Trader_GuardPresets(4, "Fighter");
DB_LLFULOOT_Trader_GuardPresets(5, "Inquisitor");
DB_LLFULOOT_Trader_GuardPresets(6, "Knight");
DB_LLFULOOT_Trader_GuardPresets(7, "Metamorph");
DB_LLFULOOT_Trader_GuardPresets(8, "Ranger");
DB_LLFULOOT_Trader_GuardPresets(9, "Rogue");
DB_LLFULOOT_Trader_GuardPresets(10, "Shadowblade");
DB_LLFULOOT_Trader_GuardPresets(11, "Wayfarer");
DB_LLFULOOT_Trader_GuardPresets(12, "Witch");
DB_LLFULOOT_Trader_GuardPresets(13, "Wizard");
//END_REGION

//REGION OBJECT_ENTERED_COMBAT
IF
ObjectEnteredCombat(_Character, _CombatID)
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_Enabled")
AND
ObjectExists(_Character, 1)
AND
ObjectIsCharacter((CHARACTERGUID)_Character, 1)
AND
NOT DB_IsPlayer(_Character)
THEN
LLFULOOT_Trader_CharacterEnteredCombat(_Character, _CombatID);

PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Character, (INTEGER)_CombatID)
THEN
DB_NOOP(1);
//END_REGION

//REGION QUERIES
QRY
LLFULOOT_QRY_Trader_TreasureWasGenerated((CHARACTERGUID)_Trader)
AND
ObjectGetFlag(_Trader, "LLFULOOT_GeneratedTradeTreasure", 1)
THEN
DB_NOOP(1);

QRY
LLFULOOT_QRY_Trader_TreasureWasGenerated((CHARACTERGUID)_Trader)
AND
DB_LastTradeItemGeneration(_Trader, _LastTH)
AND
_LastTH != 0
THEN
DB_NOOP(1);

QRY
LLFULOOT_QRY_Trader_TreasureWasGenerated((CHARACTERGUID)_Trader)
AND
DB_TraderGeneratedTreasureForLevel(_Trader, _Level)
AND
_Level != 0
THEN
DB_NOOP(1);

//Only spawn bodyguards when there's something worth protecting
QRY
LLFULOOT_QRY_Trader_IsValuableTrader((CHARACTERGUID)_Trader, (INTEGER)_MinValue)
AND
CharacterCanTrade(_Trader, 1)
AND
LLFULOOT_QRY_CanFullyLoot(_Trader)
AND
LLFULOOT_QRY_Trader_GoldValueMeetsMinimum(_Trader, _MinValue)
THEN
DB_NOOP(1);

QRY
LLFULOOT_QRY_Trader_GoldValueMeetsMinimum((CHARACTERGUID)_Trader, (INTEGER)_MinValue)
AND
CharacterGetGold(_Trader, _Value)
AND
_Value >= _MinValue
THEN
DB_NOOP(1);

QRY
LLFULOOT_QRY_Trader_GoldValueMeetsMinimum((CHARACTERGUID)_Trader, (INTEGER)_MinValue)
AND
CharacterGetInventoryGoldValue(_Trader, _Value)
AND
_Value >= _MinValue
THEN
DB_NOOP(1);

QRY
LLFULOOT_Trader_QRY_IsUndead((CHARACTERGUID)_Trader)
AND
IsTagged(_Trader, "UNDEAD", 1)
THEN
DB_NOOP(1);

QRY
LLFULOOT_Trader_QRY_IsUndead((CHARACTERGUID)_Trader)
AND
IsTagged(_Trader, "UNDEAD_BEAST", 1)
THEN
DB_NOOP(1);
//END_REGION

//REGION BEEF_MODE
PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Trader, (INTEGER)_CombatID)
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_StrongerTraders")
AND
IsTagged(_Trader, "TRADER", 1)
AND
LLFULOOT_QRY_Trader_IsValuableTrader(_Trader, 250)
AND
ObjectGetFlag(_Trader, "LLFULOOT_BeefModeEngaged", 0)
AND
CombatGetInvolvedPlayer(_CombatID, 1, _Player)
AND
CharacterIsEnemy(_Player, _Trader, 1)
THEN
ObjectSetFlag(_Trader, "LLFULOOT_BeefModeEngaged");
ApplyStatus(_Trader, "LLFULOOT_TRADER_BEEF_MODE", -1.0, 1, _Trader);
DebugBreak("[LLFULOOT:Trader:ObjectEnteredCombat] Beef mode engaged.");

IF
ItemEquipped(_Item, _Trader)
AND
GetTemplate(_Item, "EQ_Avatar_LLFULOOT_BeefPower_f26caedf-9509-4687-bcac-1f596060bf57")
AND
CharacterGetLevel(_Trader, _Level)
THEN
ItemLevelUpTo(_Item, _Level);

IF
ObjectLeftCombat((CHARACTERGUID)_Trader, _CombatID)
AND
CharacterIsDead(_Trader, 0)
AND
ObjectGetFlag(_Trader, "LLFULOOT_BeefModeEngaged", 1)
THEN
ObjectClearFlag(_Trader, "LLFULOOT_BeefModeEngaged");
RemoveStatus(_Trader, "LLFULOOT_TRADER_BEEF_MODE");
//END_REGION

//REGION TRADER_VALUE
PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Trader, (INTEGER)_CombatID)
AND
CharacterCanTrade(_Trader, 1)
AND
ObjectGetFlag(_Trader, "LLFULOOT_GeneratedTradeTreasure", 0)
AND
CharacterGetHostCharacter(_Player)
THEN
LLFULOOT_Trader_InitializeInventoryValue(_Trader, _Player);

IF
CharacterStartAttackObject(_Trader, (CHARACTERGUID)_Player, _)
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_Enabled")
AND
ObjectIsCharacter((CHARACTERGUID)_Trader, 1)
//AttackedByObject((CHARACTERGUID)_Trader, (CHARACTERGUID)_Player, _, _, _)
AND
ObjectGetFlag(_Trader, "LLFULOOT_GeneratedTradeTreasure", 0)
AND
CharacterIsPlayer(_Player, 1)
AND
CharacterCanTrade(_Trader, 1)
THEN
LLFULOOT_Trader_InitializeInventoryValue(_Trader, _Player);

//Since trade items may not be generated yet, force a generation so we can determine the trader's value
PROC
LLFULOOT_Trader_InitializeInventoryValue((CHARACTERGUID)_Trader, (CHARACTERGUID)_Player)
AND
IsTagged(_Trader, "TRADER", 1)
AND
NOT LLFULOOT_QRY_Trader_TreasureWasGenerated(_Trader)
AND
GetPosition(_Trader, _x, _y, _z)
AND
CreateItemTemplateAtPosition("S_LLFULOOT_InvisibleBackpack_394d4e05-b258-4b3f-a78b-eff97a25b231", _x, _y, _z, _Backpack)
THEN
DB_LLFULOOT_Trader_Temp_GeneratingItems(_Trader, _Player, _Backpack);
MoveAllItemsTo(_Trader, _Backpack, 0, 0, 0);
ProcObjectTimer(_Trader, "LLFULOOT_Timers_ItemsMoved_GenerateItems", 150);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Trader, "LLFULOOT_Timers_ItemsMoved_GenerateItems")
AND
DB_LLFULOOT_Trader_Temp_GeneratingItems(_Trader, _Player, _Backpack)
THEN
ObjectSetFlag(_Trader, "LLFULOOT_GeneratedTradeTreasure");
GenerateItems(_Player, _Trader);
ProcObjectTimer(_Trader, "LLFULOOT_Timers_GenerateItems_MoveItemsBack", 200);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Trader, "LLFULOOT_Timers_GenerateItems_MoveItemsBack")
AND
DB_LLFULOOT_Trader_Temp_GeneratingItems(_Trader, _Player, _Backpack)
THEN
NOT DB_LLFULOOT_Trader_Temp_GeneratingItems(_Trader, _Player, _Backpack);
MoveAllItemsTo(_Backpack, _Trader, 0, 0, 0);
ProcObjectTimer(_Backpack, "LLFULOOT_Timers_RemoveItem", 250);
//END_REGION

//REGION BODYGUARD_SPAWNING
IF
AttackedByObject((CHARACTERGUID)_Trader, (CHARACTERGUID)_Player, _, _, _)
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_Enabled")
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_SpawnGuards")
AND
ObjectGetFlag(_Trader, "LLFULOOT_SpawnedGuards", 0)
AND
ObjectGetFlag(_Trader, "LLFULOOT_CanSpawnGuards", 0)
AND
CharacterIsDead(_Trader, 0)
AND
CharacterIsPlayer(_Player, 1)
AND
IsTagged(_Trader, "TRADER", 1)
AND
LLFULOOT_QRY_Trader_IsValuableTrader(_Trader, 1000)
THEN
ObjectSetFlag(_Trader, "LLFULOOT_CanSpawnGuards");

IF
CharacterAttitudeTowardsPlayerChanged(_Trader, _Player, _Attitude)
AND
ObjectGetFlag(_Trader, "LLFULOOT_CanSpawnGuards", 1)
AND
_Attitude > 0
THEN
ObjectClearFlag(_Trader, "LLFULOOT_CanSpawnGuards");

IF
ObjectFlagSet("LLFULOOT_CanSpawnGuards", (CHARACTERGUID)_Trader, _)
AND
ObjectGetFlag(_Trader, "LLFULOOT_SpawnedGuards", 0)
AND
CharacterIsInCombat(_Trader, 1)
THEN
LLFULOOT_Trader_Internal_GuardSpawnCheck(_Trader);

PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Trader, (INTEGER)_CombatID)
AND
ObjectGetFlag(_Trader, "LLFULOOT_CanSpawnGuards", 1) // Only traders attacked by players
AND
ObjectGetFlag(_Trader, "LLFULOOT_SpawnedGuards", 0)
THEN
LLFULOOT_Trader_Internal_GuardSpawnCheck(_Trader);

PROC
LLFULOOT_Trader_Internal_GuardSpawnCheck((CHARACTERGUID)_Trader)
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_Enabled")
AND
DB_GlobalFlag("LLFULOOT_TraderDifficulty_SpawnGuards")
AND
CharacterIsDead(_Trader, 0)
AND
CombatGetIDForCharacter(_Trader, _CombatID)
AND
CombatGetInvolvedPlayer(_CombatID, 1, _Player)
AND
CharacterIsEnemy(_Player, _Trader, 1)
THEN
DebugBreak("[LLFULOOT:Trader:ObjectFlagSet(LLFULOOT_CanSpawnGuards)] Spawning trader guards.");
ObjectSetFlag(_Trader, "LLFULOOT_SpawnedGuards");
ObjectClearFlag(_Trader, "LLFULOOT_CanSpawnGuards");
LLFULOOT_Trader_Internal_StartSpawningGuards(_Trader, _Player, _CombatID);

PROC
LLFULOOT_Trader_Internal_StartSpawningGuards((CHARACTERGUID)_Trader, (CHARACTERGUID)_Player, (INTEGER)_CombatID)
AND
NOT DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _)
AND
CharacterGetInventoryGoldValue(_Trader, _GoldValue)
AND
CharacterGetLevel(_Trader, _Level)
AND
IntegerDivide(_GoldValue, _Level, _IntA)
AND
IntegerDivide(_IntA, 1000, _IntB)
AND
IntegerSum(_IntB, 1, _IntC)
AND
IntegerMin(_IntC, 4, _Max)
AND
Random(99999, _Ran)
AND
IntegerModulo(_Ran, _Max, _RanAmount)
AND
IntegerMax(_RanAmount, 1, _GuardAmount)
AND
IntegertoString(_GuardAmount, _AmountStr)
AND
StringConcatenate("[LLFULOOT:Trader:SpawnGuards] Spawning [", _AmountStr, _Str1)
AND
StringConcatenate(_Str1, "] guards.", _Msg)
THEN
DebugBreak(_Msg);
LLFULOOT_Trader_RecordTraderRace(_Trader); // Fill DB_LLFULOOT_Trader_Temp_TraderRace
DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _GuardAmount);
ProcObjectTimer(_Trader, "LLFULOOT_Timers_SpawnGuards", 1000);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Trader, "LLFULOOT_Timers_SpawnGuards")
THEN
DebugBreak("[LLFULOOT:Trader:ProcObjectTimerFinished:LLFULOOT_Timers_SpawnGuards] Spawning next guard.");
LLFULOOT_Trader_Internal_SpawnGuard(_Trader);

QRY
LLFULOOT_Trader_QRY_GetTraderRace((CHARACTERGUID)_Trader)
THEN
LLFULOOT_Trader_RecordTraderRace(_Trader);

PROC
LLFULOOT_Trader_RecordTraderRace((CHARACTERGUID)_Trader)
AND
DB_LLFULOOT_Trader_RaceTemplates(_Tag, _Gender, _Template)
AND
NOT DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _)
AND
IsTagged(_Trader, _Tag, 1)
THEN
DebugBreak(_Tag);
DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _Tag);

PROC
LLFULOOT_Trader_RecordTraderRace((CHARACTERGUID)_Trader)
AND
NOT DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _)
AND
GetTemplate(_Trader, _Template)
AND
DB_LLFULOOT_Trader_RaceTemplates(_Tag, _Gender, _RaceTemplate)
AND
NOT DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _)
AND
StringSub(_RaceTemplate, 0, 5, _CheckStr)
AND
StringContains(_Template, _CheckStr, 1)
THEN
DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _Tag);

PROC
LLFULOOT_Trader_RecordTraderRace((CHARACTERGUID)_Trader)
AND
NOT DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _)
AND
LLFULOOT_Trader_QRY_IsUndead(_Trader)
THEN
DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, "Undead_Human");

PROC
LLFULOOT_Trader_RecordTraderRace((CHARACTERGUID)_Trader)
AND
NOT DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _)
AND
NOT LLFULOOT_Trader_QRY_IsUndead(_Trader)
THEN
DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, "Human");

QRY
LLFULOOT_Trader_QRY_GetGuardTemplate((CHARACTERGUID)_Trader, (STRING)_Race)
THEN
LLFULOOT_Trader_SetGuardTemplate(_Trader, _Race);

PROC
LLFULOOT_Trader_SetGuardTemplate((CHARACTERGUID)_Trader, (STRING)_Race)
AND
NOT DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, _)
AND
StringContains(_Race, "Undead", 0)
THEN
DebugBreak("[LLFULOOT:Trader:QRY_GetGuardTemplate] Next guard template is [LLFULOOT_Guard_Normal].");
DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, "LLFULOOT_Guard_Normal_0093d0d1-1e98-4c09-8fea-3c0b1dce37c4");

PROC
LLFULOOT_Trader_SetGuardTemplate((CHARACTERGUID)_Trader, (STRING)_Race)
AND
NOT DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, _)
AND
StringContains(_Race, "Undead", 1)
THEN
DebugBreak("[LLFULOOT:Trader:QRY_GetGuardTemplate] Next guard template is [LLFULOOT_Guard_Undead].");
DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, "LLFULOOT_Guard_Undead_777fa141-15b9-4613-8e01-697117242c7f");

PROC
LLFULOOT_Trader_SetGuardTemplate((CHARACTERGUID)_Trader, (STRING)_Race)
AND
NOT DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, _)
THEN
DebugBreak("[LLFULOOT:Trader:QRY_GetGuardTemplate] No race match. Next guard template defaulted to [LLFULOOT_Guard_Normal].");
DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, "LLFULOOT_Guard_Normal_0093d0d1-1e98-4c09-8fea-3c0b1dce37c4");

QRY
LLFULOOT_Trader_QRY_SetGuardPreset((CHARACTERGUID)_Trader, (INTEGER)_Level, (INTEGER)_PresetIndex)
AND
NOT DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _)
AND
_Level <= 10
AND
DB_LLFULOOT_Trader_GuardPresets(_PresetIndex, _Preset)
AND
StringConcatenate("[LLFULOOT:Trader:QRY_SetGuardPreset] Applying preset [", _Preset, _Str1)
AND
StringConcatenate(_Str1, "] to guard.", _Str2)
THEN
DebugBreak(_Str2);
DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _Preset);

QRY
LLFULOOT_Trader_QRY_SetGuardPreset((CHARACTERGUID)_Trader, (INTEGER)_Level, (INTEGER)_PresetIndex)
AND
NOT DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _)
AND
_Level > 10
AND
DB_LLFULOOT_Trader_GuardPresets(_PresetIndex, _Preset)
AND
StringConcatenate(_Preset, "_Act2", _FinalPreset)
AND
StringConcatenate("[LLFULOOT:Trader:QRY_SetGuardPreset] Applying preset [", _FinalPreset, _Str1)
AND
StringConcatenate(_Str1, "] to guard.", _Str2)
THEN
DebugBreak(_Str2);
DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _FinalPreset);


/*
QRY
LLFULOOT_Trader_QRY_SetGuardPreset((CHARACTERGUID)_Trader, (INTEGER)_Level, (INTEGER)_PresetIndex)
AND
NOT DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _)
AND
_Level > 10
AND
DB_LLFULOOT_Trader_GuardPresets2(_PresetIndex, _Preset)
AND
StringConcatenate("[LLFULOOT:Trader:QRY_SetGuardPreset] Applying preset [", _Preset, _Str1)
AND
StringConcatenate(_Str1, "] to guard.", _Str2)
THEN
DebugBreak(_Str2);
DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _Preset);
*/

PROC
LLFULOOT_Trader_Internal_SpawnGuard((CHARACTERGUID)_Trader)
AND
DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _GuardAmount)
AND
_GuardAmount > 0
AND
IntegerSubtract(_GuardAmount, 1, _NextAmount)
AND
Random(1, _GenderRan)
AND
DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _Race)
AND
DB_LLFULOOT_Trader_RaceTemplates(_Race, _GenderRan, _RaceTemplate)
AND
LLFULOOT_Trader_QRY_GetGuardTemplate(_Trader, _Race)
AND
DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, _GuardTemplate)
AND
TemporaryCharacterCreateOutOfSightToObject(_GuardTemplate, _Player, _Trader, 0, "", _Guard)
AND
GetFaction(_Trader, _Faction)
AND
CharacterGetLevel(_Trader, _Level)
AND
SysCount("DB_LLFULOOT_Trader_GuardPresets", 2, _PresetTotal)
AND
IntegerSubtract(_PresetTotal, 1, _LastIndex)
AND
Random(99999, _PresetRan)
AND
IntegerModulo(_PresetRan, _LastIndex, _PresetIndex)
AND
LLFULOOT_Trader_QRY_SetGuardPreset(_Trader, _Level, _PresetIndex)
AND
DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _Preset)
AND
CharacterGetDisplayName(_Trader, _, _TraderName)
AND
StringConcatenate(_TraderName, "'s Bodyguard", _Name)
THEN
DebugBreak("[LLFULOOT:Trader:Internal:SpawnGuard] Spawned guard.");
NOT DB_LLFULOOT_Trader_Temp_NextGuardPreset(_Trader, _Preset);
NOT DB_LLFULOOT_Trader_Temp_NextGuardTemplate(_Trader, _GuardTemplate);
NOT DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _GuardAmount);
DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _NextAmount);
DB_LLFULOOT_Trader_Temp_GuardCombat(_Trader, _Guard, _Player, _CombatID);
//CharacterApplyRacePreset(_Guard, _Race);
CharacterTransform(_Guard, _RaceTemplate, 0, 1, 0, 0, 0, 0, 0); // Appearance only
//CharacterTransformAppearanceTo(_Guard, _Trader, 0, 0);
CharacterSetCustomName(_Guard, _Name);

SetOnStage(_Guard, 0);
LLFULOOT_Trader_Internal_SetupGuard(_Guard, _Preset);

SetFaction(_Guard, _Faction);
CharacterAddAttitudeTowardsPlayer(_Guard, _Trader, 100);
CharacterAddAttitudeTowardsPlayer(_Guard, _Player, -100);
CharacterSetRelationIndivFactionToFaction(_Guard, "Hero", -100);

CharacterLevelUpTo(_Guard, _Level);

SetTag(_Guard, "LLFULOOT_TraderGuard");
SetTag(_Guard, "GUARD");
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard);
TeleportTo(_Guard, _Trader, "LLFULOOT_GuardAppeared", 0, 0, 0);
ProcObjectTimerCancel(_Trader, "Timers_LLFULOOT_Trader_SpawnNextGuard");
ProcObjectTimer(_Trader, "Timers_LLFULOOT_Trader_SpawnNextGuard", 250);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Trader, "Timers_LLFULOOT_Trader_SpawnNextGuard")
THEN
LLFULOOT_Trader_Internal_SpawnNextGuard(_Trader);

// [BEGIN_NO_OSITOOLS]
PROC
LLFULOOT_Trader_Internal_SetupGuard((CHARACTERGUID)_Guard, (STRING)_Preset)
THEN
CharacterMakePlayer(_Guard);
CharacterApplyPreset(_Guard, _Preset);
//PROC_GLO_PartyMembers_Kick(_Guard, _Faction);
CharacterMakeNPC(_Guard);
// [END_NO_OSITOOLS]

/* [OSITOOLS_ONLY]
PROC
LLFULOOT_Trader_Internal_SetupGuard((CHARACTERGUID)_Guard, (STRING)_Preset)
AND
GetUUID(_Guard, _GuardStr)
THEN
NRD_ModCall("FullLoot", "SetupGuard", _GuardStr, _Preset);
*/

PROC
LLFULOOT_Trader_Internal_SpawnNextGuard((CHARACTERGUID)_Trader)
AND
DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _GuardAmount)
AND
_GuardAmount <= 0
AND
DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _Race)
THEN
NOT DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _GuardAmount);
NOT DB_LLFULOOT_Trader_Temp_TraderRace(_Trader, _Race);
DebugBreak("[LLFULOOT:Trader:Internal:SpawnNextGuard] Finished spawning guards.");

PROC
LLFULOOT_Trader_Internal_SpawnNextGuard((CHARACTERGUID)_Trader)
AND
DB_LLFULOOT_Trader_Temp_SpawnGuards(_Trader, _Player, _CombatID, _GuardAmount)
AND
_GuardAmount > 0
THEN
DebugBreak("[LLFULOOT:Trader:Internal:SpawnNextGuard] Spawning next guard after 500ms.");
ProcObjectTimer(_Trader, "LLFULOOT_Timers_SpawnGuards", 500);

IF
StoryEvent((CHARACTERGUID)_Guard, "LLFULOOT_GuardAppeared")
THEN
//CharacterTransformFromCharacter(_Guard, _Guard, 0, 0, 0, 0, 0, 0, 1); // Release player data
CharacterSetCorpseLootable(_Guard, 0);
CharacterSetCanTrade(_Guard, 0);
Foop(_Guard);
DebugBreak("[LLFULOOT:Trader:StoryEvent:LLFULOOT_GuardAppeared] Guard 'fooped' into position.");
ProcObjectTimer(_Guard, "LLFULOOT_Timers_DisplayGuardText", 500);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Guard, "LLFULOOT_Timers_DisplayGuardText")
AND
Random(999, _Ran)
AND
IntegerModulo(_Ran, 4, _LineIndex)
AND
IntegertoString(_LineIndex, _LineIndexStr)
AND
StringConcatenate("LLFULOOT_GuardAppeared_Line", _LineIndexStr, _Line)
THEN
DisplayText(_Guard, _Line);

IF
StoryEvent((CHARACTERGUID)_Guard, "LLFULOOT_GuardAppeared")
AND
DB_LLFULOOT_Trader_Temp_GuardCombat(_Trader, _Guard, _Player, _CombatID)
THEN
NOT DB_LLFULOOT_Trader_Temp_GuardCombat(_Trader, _Guard, _Player, _CombatID);
SetTag(_Guard, "LLFULOOT_LootDisabled");
EnterCombat(_Guard, _Player);
//JumpToTurn(_Guard);
DebugBreak("[LLFULOOT:Trader:StoryEvent('GuardAppeared')] Trader guard entered combat.");

//The status attempt seems to fire before CharacterDying, which ultimately prevents an empty backpack from being dropped.
IF
CharacterPrecogDying(_Guard)
AND
IsTagged(_Guard, "LLFULOOT_TraderGuard", 1)
AND
GetPosition(_Guard, _x, _y, _z)
AND
CreateItemTemplateAtPosition("S_LLFULOOT_InvisibleBackpack_394d4e05-b258-4b3f-a78b-eff97a25b231", _x, _y, _z, _Backpack)
THEN
MoveAllItemsTo(_Guard, _Backpack, 0, 0, 0);
ProcObjectTimer(_Backpack, "LLFULOOT_Timers_RemoveItem", 200);

IF
CharacterDied(_Guard)
AND
IsTagged(_Guard, "LLFULOOT_TraderGuard", 1)
THEN
Poof(_Guard);
RemoveTemporaryCharacter(_Guard);
//END_REGION

//REGION BODYGUARD_INVESTIGATE
IF
CharacterKilledBy(_Trader, _Player, _)
AND
CharacterIsPlayer(_Player, 1)
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
CharacterIsInCombat(_Guard, 0)
AND
CharacterCanSee(_Guard, _Trader, 0)
AND
GetDistanceTo(_Guard, _Trader, _Dist)
AND
_Dist >= 10
AND
_Dist <= 60
AND
GetPosition(_Trader, _x, _y, _z)
THEN
DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Player);
ProcCharacterMoveToPosition(_Guard, _x, _y, _z, 1, "LLFULOOT_BodyguardArrived");

IF
StoryEvent((CHARACTERGUID)_Guard, "LLFULOOT_BodyguardArrived")
AND
GetClosestAlivePlayer(_Guard, _Player, _Dist)
AND
CharacterCanSee(_Guard, _Player, 1)
AND
DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Murderer)
AND
CharacterIsInPartyWith(_Player, _Murderer, 1)
THEN
NOT DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Player);
EnterCombat(_Guard, _Player);

IF
DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Murderer)
THEN
ProcObjectTimer(_Guard, "LLFULOOT_Timers_ClearBodyguardInvestigation", 120000); // 2 minutes

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Guard, "LLFULOOT_Timers_ClearBodyguardInvestigation")
AND
DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Murderer)
THEN
NOT DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Murderer);

PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Guard, (INTEGER)_CombatID)
AND
DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Murderer)
AND
DB_ObjectTimer(_Guard, _ObjectTimerName, "LLFULOOT_Timers_ClearBodyguardInvestigation")
THEN
ProcObjectTimerCancel(_Guard, "LLFULOOT_Timers_ClearBodyguardInvestigation");
NOT DB_LLFULOOT_Trader_Temp_TraderMurderer(_Guard, _Trader, _Murderer);
//END_REGION

//REGION BODYGUARD_FOLLOWING
IF
ObjectLeftCombat((CHARACTERGUID)_Guard, _CombatID)
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
CharacterIsDead(_Trader, 0)
AND
CharacterIsInCombat(_Trader, 0)
THEN
ProcCharacterFollowCharacter(_Guard, _Trader);

/*
PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Guard, (INTEGER)_CombatID)
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
DB_Following(_Guard, _Trader)
THEN
ProcCharacterStopFollow(_Guard);
*/
//END_REGION

//REGION BODYGUARD_RESET
IF
ObjectLeftCombat((CHARACTERGUID)_Trader, _CombatID)
AND
CharacterIsDead(_Trader, 0)
AND
ObjectGetFlag(_Trader, "LLFULOOT_SpawnedGuards", 1)
THEN
ProcObjectTimer(_Trader, "LLFULOOT_Timers_ResetBodyguards", 300000); // 5 minutes

PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Trader, (INTEGER)_CombatID)
AND
DB_ObjectTimer(_Trader, _ObjectTimerName, "LLFULOOT_Timers_ResetBodyguards")
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
GetDistanceTo(_Trader, _Guard, _Dist)
AND
_Dist < 20
THEN
SetStoryEvent(_Guard, "LLFULOOT_BodyguardArrivedAtTrader_Part2");

PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Trader, (INTEGER)_CombatID)
AND
DB_ObjectTimer(_Trader, _ObjectTimerName, "LLFULOOT_Timers_ResetBodyguards")
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
GetDistanceTo(_Trader, _Guard, _Dist)
AND
_Dist >= 20
THEN
PlayEffect(_Guard, "RS3_FX_GP_ScriptedEvent_Teleport_GenericSmoke_01");
TeleportTo(_Guard, _Trader, "LLFULOOT_BodyguardArrivedAtTrader_Part2", 1, 0);

IF
StoryEvent((CHARACTERGUID)_Guard, "LLFULOOT_BodyguardArrivedAtTrader_Part2")
AND
CharacterIsInCombat(_Guard, 0)
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
CombatGetIDForCharacter(_Trader, _CombatID)
AND
DB_CombatCharacters(_Character, _CombatID)
AND
_Character != _Trader
AND
_Character != _Guard
AND
CharacterIsEnemy(_Trader, _Character, 1)
THEN
EnterCombat(_Guard, _Character);

IF
StoryEvent((CHARACTERGUID)_Guard, "LLFULOOT_BodyguardArrivedAtTrader_Part2")
THEN
ProcObjectTimer(_Guard, "LLFULOOT_Timers_DisplayGuardText", 500);

PROC
LLFULOOT_Trader_CharacterEnteredCombat((CHARACTERGUID)_Trader, (INTEGER)_CombatID)
AND
DB_ObjectTimer(_Trader, _ObjectTimerName, "LLFULOOT_Timers_ResetBodyguards")
THEN
ProcObjectTimerCancel(_Trader, "LLFULOOT_Timers_ResetBodyguards");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Trader, "LLFULOOT_Timers_ResetBodyguards")
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
ObjectExists(_Guard, 1)
AND
CharacterIsInCombat(_Guard, 0)
THEN
Poof(_Guard);
RemoveTemporaryCharacter(_Guard);
NOT DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Trader, "LLFULOOT_Timers_ResetBodyguards")
AND
DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard)
AND
ObjectExists(_Guard, 0)
THEN
NOT DB_LLFULOOT_Trader_Bodyguards(_Trader, _Guard);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_FullLoot"
